#!/bin/sh

# AppArmor Ux rules don't sanitize $PATH, which can lead to an
# exploited application (that's allowed to run this script unconfined)
# having this script run arbitrary code, violating that application's
# confinement. Let's prevent that by setting PATH to a list of
# directories where only root can write.
export PATH='/usr/local/bin:/usr/bin:/bin'

set -e
set -u

PROFILE="${HOME}/.tor-browser/profile.default"

# Import exec_firefox()
# shellcheck source=../local/lib/tails-shell-library/tor-browser.sh
. /usr/local/lib/tails-shell-library/tor-browser.sh

# Allow Torbutton access to the control port filter (for new identity).
# Setting a password is required, otherwise Torbutton attempts to
# read the authentication cookie file instead, which fails.
export TOR_CONTROL_HOST='127.0.0.1'
export TOR_CONTROL_PORT='951'
export TOR_CONTROL_PASSWD='passwd'
# Hide Torbutton's "Tor Network Settings..." context menu entry since
# it doesn't work in Tails, and we deal with those configurations
# externally through TCA.
export TOR_NO_DISPLAY_NETWORK_SETTINGS='yes'
# Enabling Wayland support to make (among other things, presumably)
# the GNOME on-screen keyboard work.
export MOZ_ENABLE_WAYLAND=1

# Torbutton 1.5.1+ uses those environment variables
export TOR_SOCKS_HOST='127.0.0.1'
export TOR_SOCKS_PORT='9050'

if ! [ -f /.flatpak-info ]; then
    echo >&2 "Error: Must be run in flatpak"
    exit 1
fi

exec_firefox -allow-remote \
    -profile "${PROFILE}" \
    "${@}"
