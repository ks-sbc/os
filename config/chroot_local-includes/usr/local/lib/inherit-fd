#!/usr/bin/python3 -I
import argparse
import logging
import os
import socket
from pathlib import Path

import tailslib.fd

# Open Unix domain sockets and files and pass the file descriptors to
# the specified command. This is useful when you want to open a socket
# or file with higher privileges and then drop privileges and pass the
# file descriptor to another process.


def main():
    # Parse arguments
    parser = argparse.ArgumentParser()
    kernel_options = Path("/proc/cmdline").read_text().split()
    parser.add_argument(
        "--debug",
        action="store_true",
        default=os.getenv("DEBUG") or "debug" in kernel_options,
        help="Enable debug logging",
    )
    parser.add_argument(
        "--socket",
        action="append",
        default=[],
        metavar="PATH",
        help="Open the specified socket",
    )
    parser.add_argument(
        "--dbus-system-bus",
        action="store_true",
        help="Open the D-Bus system bus socket",
    )
    parser.add_argument(
        "--file",
        action="append",
        default=[],
        metavar="PATH",
        help="Open the specified file in read-write mode",
    )
    parser.add_argument("CMD", help="Command to run")
    parser.add_argument(
        "ARGS", nargs=argparse.REMAINDER, help="Arguments to pass to the command"
    )
    args = parser.parse_args()

    if args.ARGS and args.ARGS[0] == "--":
        args.ARGS = args.ARGS[1:]

    # Set up logging
    log_level = logging.DEBUG if args.debug else logging.INFO
    log_format = "%(levelname)s:%(filename)s:%(lineno)d: %(message)s"
    logging.basicConfig(level=log_level, format=log_format)

    # Open sockets and/or files
    fds = []

    for path in args.file:
        fd = tailslib.fd.open_file(path, os.O_RDWR)
        if fd != len(fds) + 3:
            raise RuntimeError(f"Unexpected fd {fd} (expected {len(fds) + 3})")
        fds.append(fd)

    for path in args.socket:
        fd = tailslib.fd.connect_socket(socket.AF_UNIX, path)
        if fd != len(fds) + 3:
            raise RuntimeError(f"Unexpected fd {fd} (expected {len(fds) + 3})")
        fds.append(fd)

    if args.dbus_system_bus:
        fd = tailslib.fd.connect_dbus_system_bus()
        if fd != len(fds) + 3:
            raise RuntimeError(f"Unexpected fd {fd} (expected {len(fds) + 3})")
        fds.append(fd)

    os.execvp(args.CMD, [args.CMD, *args.ARGS])


if __name__ == "__main__":
    main()
